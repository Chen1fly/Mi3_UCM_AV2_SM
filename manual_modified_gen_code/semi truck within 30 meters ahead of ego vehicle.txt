import numpy as np
from pathlib import Path
from typing import Literal

# Assume log_dir and output_dir are predefined Path objects.
# from your_module import (
#     has_objects_in_relative_direction,
#     get_objects_of_category,
#     is_category,
#     turning,
#     changing_lanes,
#     has_lateral_acceleration,
#     facing_toward,
#     heading_toward,
#     accelerating,
#     has_velocity,
#     at_pedestrian_crossing,
#     on_lane_type,
#     near_intersection,
#     on_intersection,
#     being_crossed_by,
#     near_objects,
#     following,
#     heading_in_relative_direction_to,
#     stationary,
#     at_stop_sign,
#     in_drivable_area,
#     on_road,
#     in_same_lane,
#     on_relative_side_of_road,
#     scenario_and,
#     scenario_or,
#     reverse_relationship,
#     scenario_not,
#     output_scenario
# )

description = 'semi truck within 30 meters ahead of ego vehicle'

# Get the EGO_VEHICLE. There should typically be only one.
ego_vehicle = get_objects_of_category(log_dir, category='EGO_VEHICLE')

# Get all semi trucks. "TRUCK_CAB" is the category for semi truck tractors.
semi_trucks = get_objects_of_category(log_dir, category='TRUCK_CAB')

# We want to find instances of the "semi truck" (the referred object).
# So, the output scenario should be keyed by semi truck UUIDs.
# We use `reverse_relationship` to achieve this.
# `reverse_relationship(has_objects_in_relative_direction)` will call
# `has_objects_in_relative_direction` with `track_candidates=ego_vehicle`
# and `related_candidates=semi_trucks`.
# The `direction='forward'` is from the perspective of the `track_candidates` (ego_vehicle),
# meaning we are looking for `related_candidates` (semi_trucks) that are ahead of the ego_vehicle.
# `min_number=1`: The ego vehicle must have at least one semi truck ahead.
# `max_number=np.inf`: If multiple semi trucks are ahead, all will be included.
# `within_distance=30`: The semi truck must be within 30 meters.
# The `reverse_relationship` wrapper will then structure the output so that
# semi truck UUIDs are the primary keys.
semis_ahead_of_ego = reverse_relationship(has_objects_in_relative_direction)(
    track_candidates=semi_trucks,  # This will become the key in the final output dict
    related_candidates=ego_vehicle, # This will be the track_candidates for the internal call
    log_dir=log_dir,
    direction='forward',          # From ego_vehicle's perspective, semi is 'forward'
    min_number=1,                 # Ego must have at least one semi ahead
    max_number=np.inf,            # Capture all such semis if multiple exist
    within_distance=30            # Within 30 meters
)

# Output the scenario
output_scenario(semis_ahead_of_ego, description, log_dir, output_dir)
