# Define the description for the scenario
description = 'vehicle between two bicycles while on pedestrian crossing'

# Get all vehicles
vehicles = get_objects_of_category(log_dir, category="VEHICLE")

# Get all bicycles
bicycles = get_objects_of_category(log_dir, category="BICYCLE")

# Filter vehicles that are on a pedestrian crossing
# "on" means within_distance=0, as per the function's documentation.
vehicles_on_crossing = at_pedestrian_crossing(vehicles, log_dir, within_distance=0)

# Inspired by the "pedestrian walking between two stopped vehicles" example,
# "between two X" is interpreted as one X in front and one X behind the subject.

# Find vehicles (that are already on a crossing) that have at least one bicycle in front of them.
# within_distance: How far in front the bicycle can be (e.g., up to 10 meters).
# lateral_thresh: How much the bicycle can be offset to the side while still being "in front" (e.g., 1.5 meters, ensuring it's roughly in the same path).
vehicles_with_bicycle_in_front = has_objects_in_relative_direction(
    track_candidates=vehicles_on_crossing,
    related_candidates=bicycles,
    log_dir=log_dir,
    direction='forward',
    min_number=1,
    within_distance=10,  # Bicycle within 10 meters in front of the vehicle
    lateral_thresh=1.5   # Bicycle's center laterally within 1.5m of the vehicle's path
)

# Find vehicles (that are already on a crossing) that have at least one bicycle behind them.
# within_distance: How far behind the bicycle can be (e.g., up to 10 meters).
# lateral_thresh: How much the bicycle can be offset to the side while still being "behind" (e.g., 1.5 meters).
vehicles_with_bicycle_behind = has_objects_in_relative_direction(
    track_candidates=vehicles_on_crossing,
    related_candidates=bicycles,
    log_dir=log_dir,
    direction='backward',
    min_number=1,
    within_distance=10,  # Bicycle within 10 meters behind of the vehicle
    lateral_thresh=1.5   # Bicycle's center laterally within 1.5m of the vehicle's path
)

# Find vehicles that satisfy all conditions simultaneously:
# 1. Are on a pedestrian crossing (implicit as `vehicles_on_crossing` was the base).
# 2. Have a bicycle in front.
# 3. Have a bicycle behind.
# The scenario_and function will find track UUIDs (vehicles) and timestamps present in both input dictionaries.
vehicle_between_two_bicycles_on_ped_crossing = scenario_and([
    vehicles_with_bicycle_in_front,
    vehicles_with_bicycle_behind
])

# Output the scenario
output_scenario(
    vehicle_between_two_bicycles_on_ped_crossing,
    description,
    log_dir,
    output_dir
)
